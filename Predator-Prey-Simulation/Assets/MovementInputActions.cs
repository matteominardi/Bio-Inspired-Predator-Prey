//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/MovementInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MovementInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MovementInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MovementInputActions"",
    ""maps"": [
        {
            ""name"": ""ManualMovement"",
            ""id"": ""b2a19a46-6f19-4dfc-b324-1d5b2624f1f6"",
            ""actions"": [
                {
                    ""name"": ""Move Backward"",
                    ""type"": ""Button"",
                    ""id"": ""f0eef339-cadd-4086-a4fb-e6afc3ed325e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move Forward"",
                    ""type"": ""Button"",
                    ""id"": ""35f3e7d8-f324-43cb-a541-323f85bce6a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Left"",
                    ""type"": ""Button"",
                    ""id"": ""cd597ac8-d6e7-4105-a8ad-cf56303b0607"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate Right"",
                    ""type"": ""Button"",
                    ""id"": ""7319fd64-a58d-469b-8df1-9532bf90d705"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""102a6a43-6da3-4ef0-a8e3-1d232488aeab"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75f65175-ff98-46f9-bd0a-d0af9f89e066"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ba3ba80-2ce9-4b76-8b35-cf5612109bf3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f3f3c1a-0521-44b0-933f-1d6b75cda062"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ManualMovement
        m_ManualMovement = asset.FindActionMap("ManualMovement", throwIfNotFound: true);
        m_ManualMovement_MoveBackward = m_ManualMovement.FindAction("Move Backward", throwIfNotFound: true);
        m_ManualMovement_MoveForward = m_ManualMovement.FindAction("Move Forward", throwIfNotFound: true);
        m_ManualMovement_RotateLeft = m_ManualMovement.FindAction("Rotate Left", throwIfNotFound: true);
        m_ManualMovement_RotateRight = m_ManualMovement.FindAction("Rotate Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ManualMovement
    private readonly InputActionMap m_ManualMovement;
    private List<IManualMovementActions> m_ManualMovementActionsCallbackInterfaces = new List<IManualMovementActions>();
    private readonly InputAction m_ManualMovement_MoveBackward;
    private readonly InputAction m_ManualMovement_MoveForward;
    private readonly InputAction m_ManualMovement_RotateLeft;
    private readonly InputAction m_ManualMovement_RotateRight;
    public struct ManualMovementActions
    {
        private @MovementInputActions m_Wrapper;
        public ManualMovementActions(@MovementInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBackward => m_Wrapper.m_ManualMovement_MoveBackward;
        public InputAction @MoveForward => m_Wrapper.m_ManualMovement_MoveForward;
        public InputAction @RotateLeft => m_Wrapper.m_ManualMovement_RotateLeft;
        public InputAction @RotateRight => m_Wrapper.m_ManualMovement_RotateRight;
        public InputActionMap Get() { return m_Wrapper.m_ManualMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ManualMovementActions set) { return set.Get(); }
        public void AddCallbacks(IManualMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_ManualMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ManualMovementActionsCallbackInterfaces.Add(instance);
            @MoveBackward.started += instance.OnMoveBackward;
            @MoveBackward.performed += instance.OnMoveBackward;
            @MoveBackward.canceled += instance.OnMoveBackward;
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @RotateLeft.started += instance.OnRotateLeft;
            @RotateLeft.performed += instance.OnRotateLeft;
            @RotateLeft.canceled += instance.OnRotateLeft;
            @RotateRight.started += instance.OnRotateRight;
            @RotateRight.performed += instance.OnRotateRight;
            @RotateRight.canceled += instance.OnRotateRight;
        }

        private void UnregisterCallbacks(IManualMovementActions instance)
        {
            @MoveBackward.started -= instance.OnMoveBackward;
            @MoveBackward.performed -= instance.OnMoveBackward;
            @MoveBackward.canceled -= instance.OnMoveBackward;
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @RotateLeft.started -= instance.OnRotateLeft;
            @RotateLeft.performed -= instance.OnRotateLeft;
            @RotateLeft.canceled -= instance.OnRotateLeft;
            @RotateRight.started -= instance.OnRotateRight;
            @RotateRight.performed -= instance.OnRotateRight;
            @RotateRight.canceled -= instance.OnRotateRight;
        }

        public void RemoveCallbacks(IManualMovementActions instance)
        {
            if (m_Wrapper.m_ManualMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IManualMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_ManualMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ManualMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ManualMovementActions @ManualMovement => new ManualMovementActions(this);
    public interface IManualMovementActions
    {
        void OnMoveBackward(InputAction.CallbackContext context);
        void OnMoveForward(InputAction.CallbackContext context);
        void OnRotateLeft(InputAction.CallbackContext context);
        void OnRotateRight(InputAction.CallbackContext context);
    }
}
